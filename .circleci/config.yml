image_config: &image_config

  # make sure to set your Docker Hub username & password in CircleCI,
  # either as project-specific environment variables
  # or as resources in your organization's org-global Context

  IMAGE_NAME: kitchen-con
  IMAGE_TAG: 0.0.4
  DOCKER_NAME: heymrjee/example-docker-build 
  DOCKER_REGISTRY: $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG 

version: 2
jobs:
  build:
    machine: true
    environment:
      <<: *image_config

    steps:
      - checkout

      #- run: bash scripts/generate.sh > Dockerfile

      #- run: docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG .
      - run: 
          name: Build docker image
          command: |
            docker build -f Dockerfile -t $DOCKER_NAME .

      - run: 
          name: Push docker image into docker registry
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            # When branch is master, update latest docker image
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                REMOTE_DOCKER_TAG=${DOCKER_NAME}:latest
                docker tag ${DOCKER_NAME} ${REMOTE_DOCKER_TAG}
                echo "Push docker image into ${REMOTE_DOCKER_TAG}"
                docker push ${REMOTE_DOCKER_TAG}
            fi
            # When tag is defined, push new docker image with given tag
            if [ -n "${CIRCLE_TAG}" ]; then
                REMOTE_DOCKER_TAG=${DOCKER_NAME}:${CIRCLE_TAG}
                docker tag ${DOCKER_NAME} ${REMOTE_DOCKER_TAG}
                echo "Push docker image into ${REMOTE_DOCKER_TAG}"
                docker push ${REMOTE_DOCKER_TAG}
            fi
            sleep 10

      #- run: docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG && sleep 10

      #- store_artifacts:
      #    path: Dockerfile

  test_image:
    docker:
      - image: $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG 
        environment:
          <<: *image_config

    steps:
      - checkout

      #- run:
      #    name: start Xvfb for phantomjs test
          # command: Xvfb :99
          # background: true

      - run:
          name: bats tests
          command: |
            mkdir -p test_results/bats
            bats scripts/tests.bats | \
            perl scripts/tap-to-junit.sh > \
            test_results/bats/results.xml

      - store_test_results:
          path: test_results

      - store_artifacts:
          path: test_results

workflows:
  version: 2
  docker-build:
    jobs:
      - build:
          filters:
            tags:
              # When you push any tag, build will be triggered.
              only: /.*/
#          context: org-global
#      - test_image:
#          context: org-global
#          requires:
#            - build
